#include <iostream>
#include <vector>
#include <cctype>
#include <cmath>
#include <stdexcept>
#include <string>
#include <algorithm> // Для std::find_if и std::remove_if
using namespace std;

// Структура для таблицы Регионы
struct Регион {
    int регион_ид;
    string название_региона;
};

// Структура для таблицы Поставщики
struct Поставщик {
    int поставщик_ид;
    string название_поставщика;
    int регион_ид;
};

// Класс для расчёта числа состояний
class ByteStates {
private:
    int _количество_состояний = 0;

public:
    ByteStates(int количество_состояний) {
        if (количество_состояний < 0) {
            throw invalid_argument("Ошибка: количество состояний не может быть отрицательным!");
        }
        _количество_состояний = количество_состояний;
    }

    short countBits() {
        try {
            if (_количество_состояний == 0) return 0;
            int биты = 0;
            for (int i = 1; i <= 64; i++) {
                if (i > 63 && _количество_состояний > static_cast<long>(pow(2, 63))) {
                    throw overflow_error("Ошибка: слишком большое количество состояний!");
                }
                long счет = pow(2, i);
                if (счет >= _количество_состояний) {
                    биты = i;
                    break;
                }
            }
            return биты;
        } catch (const overflow_error& e) {
            cerr << e.what() << endl;
            return -1;
        }
    }
};

// Функция для поиска региона по ID
const Регион* найти_регион(const vector<Регион>& регионы, int регион_ид) {
    auto it = find_if(регионы.begin(), регионы.end(),
        [регион_ид](const Регион& р) { return р.регион_ид == регион_ид; });
    return it != регионы.end() ? &(*it) : nullptr;
}

int main() {
    try {
        // Эмуляция таблиц
        vector<Регион> регионы;
        vector<Поставщик> поставщики;

        // Create: Добавление данных в Регионы
        регионы.push_back({1, "Европа"});
        регионы.push_back({2, "Азия"});
        регионы.push_back({3, "--неизвестно--"});

        // Create: Добавление данных в Поставщики
        поставщики.push_back({1, "ТехноТорг", 1});
        поставщики.push_back({2, "АзияИмпорт", 2});
        поставщики.push_back({3, "ГлобалТех", 2});
        поставщики.push_back({4, "ТехноТорг", 2});

        // Read: Вывод данных (аналог INNER JOIN)
        cout << "Производитель | ид | Регион\n";
        cout << "--------------|----|-------------------\n";
        for (const auto& пост : поставщики) {
            const Регион* рег = найти_регион(регионы, пост.регион_ид);
            if (!рег) {
                throw runtime_error("Ошибка: регион с ID " + to_string(пост.регион_ид) + " не найден!");
            }
            cout << пост.название_поставщика << " | " << пост.поставщик_ид << " | "
                 << рег->название_региона << " (регион:" << рег->регион_ид << ")\n";
        }

        // Вывод гласных букв из названий поставщиков
        cout << "\nГласные буквы в названиях поставщиков:\n";
        for (const auto& пост : поставщики) {
            if (пост.название_поставщика.empty()) {
                throw runtime_error("Ошибка: пустое название поставщика!");
            }
            for (char символ : пост.название_поставщика) {
                char нижний_символ = ::tolower(символ);
                if (нижний_символ == 'a' || нижний_символ == 'e' || нижний_символ == 'i' ||
                    нижний_символ == 'o' || нижний_символ == 'u') {
                    cout << символ;
                }
            }
            cout << endl;
        }

        // Update: Обновление регион_ид для ТехноТорг с регион_ид = 2
        for (auto& пост : поставщики) {
            if (пост.название_поставщика == "ТехноТорг" && пост.регион_ид == 2) {
                if (!найти_регион(регионы, 3)) {
                    throw runtime_error("Ошибка: целевой регион с ID 3 не найден!");
                }
                пост.регион_ид = 3;
            }
        }

        // Delete: Удаление ГлобалТех с регион_ид = 2
        поставщики.erase(
            remove_if(поставщики.begin(), поставщики.end(),
                [](const Поставщик& пост) {
                    return пост.название_поставщика == "ГлобалТех" && пост.регион_ид == 2;
                }),
            поставщики.end()
        );

        // Read: Повторный вывод для проверки изменений
        cout << "\nПосле обновления и удаления:\n";
        cout << "Производитель | ид | Регион\n";
        cout << "--------------|----|---------\n";
        for (const auto& пост : поставщики) {
            const Регион* рег = найти_регион(регионы, пост.регион_ид);
            if (!рег) {
                throw runtime_error("Ошибка: регион с ID " + to_string(пост.регион_ид) + " не найден!");
            }
            cout << пост.название_поставщика << " | " << пост.поставщик_ид << " | "
                 << рег->название_региона << "\n";
        }

        // Тестирование ByteStates
        int состояния;
        cout << "\nВведите количество состояний: ";
        cin >> состояния;
        if (cin.fail()) {
            throw invalid_argument("Ошибка: некорректный ввод числа состояний!");
        }
        ByteStates объект(состояния);
        short биты = объект.countBits();
        if (биты == -1) {
            throw runtime_error("Ошибка при вычислении количества бит!");
        }
        cout << "Для " << состояния << " состояний требуется " << биты << " бит.\n";

    } catch (const invalid_argument& e) {
        cerr << e.what() << endl;
        return 1;
    } catch (const runtime_error& e) {
        cerr << e.what() << endl;
        return 1;
    } catch (...) {
        cerr << "Неизвестная ошибка!" << endl;
        return 1;
    }

    return 0;
}
