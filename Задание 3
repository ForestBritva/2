#include <iostream>
#include <vector>
#include <cctype>
#include <cmath>
#include <stdexcept> // Для исключений
using namespace std;

class ByteStates {
private:
    int _количество_состояний = 0; // Общее число состояний

public:
    ByteStates(int количество_состояний) {
        if (количество_состояний < 0) {
            throw invalid_argument("Ошибка: количество состояний не может быть отрицательным!");
        }
        _количество_состояний = количество_состояний; // Инициализируем переменную класса
    }

    short countBits() {
        try {
            if (_количество_состояний == 0) {
                return 0; // Для 0 состояний требуется 0 бит
            }

            int биты = 0; // Число необходимых бит
            for (int i = 1; i <= 64; i++) {
                // Проверяем переполнение для pow(2, i)
                if (i > 63 && _количество_состояний > static_cast<long>(pow(2, 63))) {
                    throw overflow_error("Ошибка: слишком большое количество состояний для представления в 64 битах!");
                }

                long счет = pow(2, i); // 2, 4, 8, ... (2 в степени i)
                if (счет >= _количество_состояний) {
                    биты = i; // Запоминаем минимальное число бит
                    break;
                }
            }
            return биты;
        } catch (const overflow_error& e) {
            cerr << e.what() << endl;
            return -1; // Возвращаем -1 в случае ошибки
        }
    }
};

int main() {
    try {
        // Создаём вектор строк
        vector<string> *строки = new vector<string>();
        строки->push_back("AbC");
        строки->push_back("dEfh");

        // Выводим только гласные буквы
        for (string строка : *строки) {
            if (строка.empty()) {
                throw runtime_error("Ошибка: пустая строка в векторе!");
            }
            for (char символ : строка) {
                char нижний_символ = ::tolower(символ);
                if (нижний_символ == 'a' || нижний_символ == 'e' || нижний_символ == 'i' ||
                    нижний_символ == 'o' || нижний_символ == 'u') {
                    cout << символ;
                }
            }
            cout << endl;
        }

        // Освобождаем память
        delete строки;

        // Тестируем класс ByteStates
        cout << "\nТестирование класса ByteStates:\n";
        int состояния;
        cout << "Введите количество состояний: ";
        cin >> состояния;

        // Проверяем корректность ввода
        if (cin.fail()) {
            throw invalid_argument("Ошибка: некорректный ввод числа состояний!");
        }

        ByteStates объект(состояния);
        short биты = объект.countBits();
        if (биты == -1) {
            throw runtime_error("Ошибка при вычислении количества бит!");
        }
        cout << "Для " << состояния << " состояний требуется " << биты << " бит." << endl;

    } catch (const invalid_argument& e) {
        cerr << e.what() << endl;
        return 1;
    } catch (const runtime_error& e) {
        cerr << e.what() << endl;
        return 1;
    } catch (...) {
        cerr << "Неизвестная ошибка!" << endl;
        return 1;
    }

    return 0;
}
